### Azure Search population from blob storage - this one with embeddings and hybrid
### this scenario is on where the indexes will have filters that use the Azure AD group ID
### the documents will be in the same storage account, but different containers

### pre-requisites
### 1. create a storage account 
### 2. create a search service
### 3. create an openai deployment with the chat model
### 4. create an openai deployment with the embedding model
### 5. create an Azure AD group for the US users
### 6. create an Azure AD group for the India users
### 7. create a blob container for the US documents
### 8. create a blob container for the India documents
### 9. create a blob container for the chunks

### Create India data source
POST https://{{searchinstance}}.search.windows.net/datasources?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
    "name" : "{{searchindiadatasource}}",
    "type" : "azureblob",
    "credentials" : { "connectionString" : "DefaultEndpointsProtocol=https;AccountName={{blobaccount}};AccountKey={{blobkey}};" },
    "container" : { "name" : "{{blobindiacontainer}}", "query" : "" }
}

### Create US data source
POST https://{{searchinstance}}.search.windows.net/datasources?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
    "name" : "{{searchusdatasource}}",
    "type" : "azureblob",
    "credentials" : { "connectionString" : "DefaultEndpointsProtocol=https;AccountName={{blobaccount}};AccountKey={{blobkey}};" },
    "container" : { "name" : "{{blobuscontainer}}", "query" : "" }
}

### create new index - the idea is that the indexer will populate this, with a different region tag depending on the datasource
@newxindex=region-index
POST https://{{searchinstance}}.search.windows.net/indexes?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
    "name" : "{{newxindex}}",
    "fields": [
        { "name": "document_id", "type": "Edm.String", "key": true, "searchable": false },
        { "name": "content", "type": "Edm.String", "searchable": true, "filterable": false },
        { "name": "url", "type": "Edm.String", "searchable": true, "filterable": false },
        { "name": "filename", "type": "Edm.String", "searchable": true, "filterable": false },
        { "name": "{{sourcefield}}", "type": "Collection(Edm.String)", "filterable": true },
        { "name": "metadata_storage_name", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true  },
        { "name": "metadata_storage_size", "type": "Edm.Int64", "searchable": false, "filterable": true, "sortable": true  },
        { "name": "metadata_storage_content_type", "type": "Edm.String", "searchable": false, "filterable": true, "sortable": true }       
    ]
}


### create skillset (that does the chunking and embeddings) - note this has a reference to the embedding endpoint
### not clear right now whether I can have a common skillset between india and us, but separate indexers.
@skillsetname=region-skillset
@chunkscontainer=region-chunks
POST https://{{searchinstance}}.search.windows.net/skillsets?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
  "name": "{{skillsetname}}",
  "skills": [
    {
      "@odata.type": "#Microsoft.Skills.Custom.WebApiSkill",
      "name": "{{skillsetname}}",
      "description": null,
      "context": "/document/content",
      "uri": "https://{{openaiendpoint}}.openai.azure.com/openai/chunks?api-version=2023-03-31-preview",
      "httpMethod": "POST",
      "timeout": "PT3M",
      "batchSize": 1,
      "degreeOfParallelism": 1,
      "httpHeaders": {
           "embedding_endpoint": "https://{{openaiendpoint}}.openai.azure.com/openai/deployments/{{openaiembeddingmodel}}/embeddings?api-version=2023-03-31-preview",
           "embedding_key": "{{openaikey}}",
           "api-key": "{{openaikey}}"
      },
      "inputs": [
        {
          "name": "document_id",
          "source": "/document/document_id"
        },
        {
          "name": "filename",
          "source": "/document/filename"
        },
        {
          "name": "fieldname",
          "source": "='content'"
        },
        {
          "name": "text",
          "source": "/document/content"
        }
      ],
      "outputs": [
        {
          "name": "chunks",
          "targetName": "chunks"
        }
      ]
    }
  ],
  "cognitiveServices": null,
  "knowledgeStore": {
    "storageConnectionString": "DefaultEndpointsProtocol=https;AccountName={{blobaccount}};AccountKey={{blobkey}};EndpointSuffix=core.windows.net",
    "projections": [
      {
        "tables": [],
        "objects": [
          {
            "storageContainer": "{{chunkscontainer}}",
            "referenceKeyName": null,
            "generatedKeyName": "id",
            "source": null,
            "sourceContext": "/document/content/chunks/*",
            "inputs": [
              {
                "name": "content",
                "source": "/document/content/chunks/*/content",
                "sourceContext": null,
                "inputs": []
              },
              {
                "name": "filepath",
                "source": "/document/filename",
                "sourceContext": null,
                "inputs": []
              },
              {
                "name": "title",
                "source": "/document/content/chunks/*/title",
                "sourceContext": null,
                "inputs": []
              },
              {
                "name": "url",
                "source": "/document/url",
                "sourceContext": null,
                "inputs": []
              },
              {
                "name": "chunk_id",
                "source": "/document/content/chunks/*/chunk_id",
                "sourceContext": null,
                "inputs": []
              },
              {
                "name": "last_updated",
                "source": "/document/content/chunks/*/last_updated",
                "sourceContext": null,
                "inputs": []
              },
              {
                "name": "contentVector",
                "source": "/document/content/chunks/*/contentVector",
                "sourceContext": null,
                "inputs": []
              },
              {
                "name": "{{sourcefield}}",
                "source": "/document/{{sourcefield}}",
                "sourceContext": null,
                "inputs": []
              }
            ]
          }
        ],
        "files": []
      }
    ],
    "parameters": {
      "synthesizeGeneratedKeyName": true
    }
  },
  "encryptionKey": null
}

### create india indexer
@indiachunksindexer=india-indexer
POST https://{{searchinstance}}.search.windows.net/indexers?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
  "name" : "{{indiachunksindexer}}",
  "dataSourceName" : "{{searchindiadatasource}}",
  "targetIndexName" : "{{newxindex}}",
  "skillsetName": "{{skillsetname}}",
  "parameters": {
      "batchSize": null,
      "maxFailedItems": null,
      "maxFailedItemsPerBatch": null,
      "base64EncodeKeys": null,
      "configuration": {
          "indexedFileNameExtensions" : ".txt,.md,.html,.pdf,.docx,.pptx",
          "excludedFileNameExtensions" : ".png,.jpeg",
          "dataToExtract": "contentAndMetadata",
          "parsingMode": "default"
      }
  },
  "schedule" : { },
  "fieldMappings": [
  {
      "sourceFieldName": "metadata_storage_path",
      "targetFieldName": "document_id",
      "mappingFunction": {
        "name": "base64Encode",
        "parameters": null
      }
  },
  {
      "sourceFieldName": "metadata_storage_name",
      "targetFieldName": "filename",
      "mappingFunction": null
  },
  {
      "sourceFieldName": "metadata_storage_path",
      "targetFieldName": "url",
      "mappingFunction": null
  },
  {
      "sourceFieldName": "{{sourcefield}}",
      "targetFieldName": "{{targetfield}}",
      "mappingFunction": null
  }
  ]
}

### create us indexer
@uschunksindexer=us-indexer
POST https://{{searchinstance}}.search.windows.net/indexers?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
  "name" : "{{uschunksindexer}}",
  "dataSourceName" : "{{searchusdatasource}}",
  "targetIndexName" : "{{newxindex}}",
  "skillsetName": "{{skillsetname}}",
  "parameters": {
      "batchSize": null,
      "maxFailedItems": null,
      "maxFailedItemsPerBatch": null,
      "base64EncodeKeys": null,
      "configuration": {
          "indexedFileNameExtensions" : ".txt,.md,.html,.pdf,.docx,.pptx",
          "excludedFileNameExtensions" : ".png,.jpeg",
          "dataToExtract": "contentAndMetadata",
          "parsingMode": "default"
      }
  },
  "schedule" : { },
  "fieldMappings": [
  {
      "sourceFieldName": "metadata_storage_path",
      "targetFieldName": "document_id",
      "mappingFunction": {
        "name": "base64Encode",
        "parameters": null
      }
  },
  {
      "sourceFieldName": "metadata_storage_name",
      "targetFieldName": "filename",
      "mappingFunction": null
  },
  {
      "sourceFieldName": "metadata_storage_path",
      "targetFieldName": "url",
      "mappingFunction": null
  },
  {
      "sourceFieldName": "{{sourcefield}}",
      "targetFieldName": "{{targetfield}}",
      "mappingFunction": null
  }
  ]
}

### next we have to do the second phase which:
### another data source
### a target index
### an indexer which takes the chunks in blob and puts in the final index as hybrid (text plus vector) 

### Create new data source - now the chunks one
@newdatasourcechunks=region-datasource-chunk
@newblobcontainerchunks=region-chunks
POST https://{{searchinstance}}.search.windows.net/datasources?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
    "name" : "{{newdatasourcechunks}}",
    "type" : "azureblob",
    "credentials" : { "connectionString" : "DefaultEndpointsProtocol=https;AccountName={{blobaccount}};AccountKey={{blobkey}};" },
    "container" : { "name" : "{{newblobcontainerchunks}}", "query" : "" }
}


### create the target index that the indexer below will populate - this has vectors
@newindex=region
POST https://{{searchinstance}}.search.windows.net/indexes?api-version=2023-07-01-Preview 
Content-Type: application/json
api-key: {{searchkey}}

{
    "name" : "{{newindex}}",
      "fields": [
    { "name": "content", "type": "Edm.String", "searchable": true,  "filterable": false, "retrievable": true },
    { "name": "filepath","type": "Edm.String", "searchable": false, "filterable": false, "retrievable": true },
    { "name": "title",   "type": "Edm.String", "searchable": true,  "filterable": false, "retrievable": true },
    { "name": "url",     "type": "Edm.String", "searchable": false, "filterable": false, "retrievable": true },
    { "name": "id",      "type": "Edm.String", "searchable": false, "filterable": true,  "retrievable": true, "sortable": true, "key": true },
    { "name": "chunk_id","type": "Edm.String", "searchable": false, "filterable": false, "retrievable": true  },
    { "name": "last_updated","type": "Edm.String", "searchable": false, "filterable": false, "retrievable": true },
    { "name": "{{targetfield}}", "type": "Collection(Edm.String)", "filterable": true },
    { "name": "contentVector","type": "Collection(Edm.Single)", "searchable": true, "filterable": false, "retrievable": true, "sortable": false, "facetable": false, "key": false, "dimensions": 1536, "vectorSearchConfiguration": "default" }       
    ],
    "similarity": {
      "@odata.type": "#Microsoft.Azure.Search.BM25Similarity",
      "k1": null,
      "b": null
    },
  "semantic": {
    "defaultConfiguration": null,
    "configurations": [
      {
        "name": "default",
        "prioritizedFields": {
          "titleField": {
            "fieldName": "title"
          },
          "prioritizedContentFields": [
            {
              "fieldName": "content"
            }
          ],
          "prioritizedKeywordsFields": []
        }
      }
    ]
  },
  "vectorSearch": {
    "algorithmConfigurations": [
      {
        "name": "default",
        "kind": "hnsw",
        "hnswParameters": {
          "metric": "cosine",
          "m": 4,
          "efConstruction": 400,
          "efSearch": 1000
        },
        "exhaustiveKnnParameters": null
      }
    ]
  }
}

### create indexer (also populates index)
### this takes the xxx-chunks blob container and uses this to populate the target search index the app will use
@newchunkindexer=region-indexer-chunk
POST https://{{searchinstance}}.search.windows.net/indexers?api-version=2020-06-30
Content-Type: application/json
api-key: {{searchkey}}

{
  "name" : "{{newchunkindexer}}",
  "dataSourceName" : "{{newdatasourcechunks}}",
  "targetIndexName" : "{{newindex}}",
  "parameters": {
      "batchSize": null,
      "maxFailedItems": null,
      "maxFailedItemsPerBatch": null,
      "base64EncodeKeys": null,
       "configuration": {
          "parsingMode": "json",
          "indexedFileNameExtensions": ".json"
       }
  },
  "schedule" : { 
     "interval": "PT12H",
    "startTime": "2023-10-24T15:31:48.364Z"
  },
  "fieldMappings" : [
   ]
}



###
### now test the index for some content
###

### chat with private data from a US user's perspective - which is over the employee handbook PDF
@usfilter={{adgroupus}}
POST https://{{openaiendpoint}}.openai.azure.com/openai/deployments/{{openaichatmodel}}/extensions/chat/completions?api-version=2023-06-01-preview
api-key: {{openaikey}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": "what is the performance review process?"
        }
    ],
    "dataSources": [
        {
            "type": "AzureCognitiveSearch",
            "parameters": {
                "endpoint": "https://{{searchinstance}}.search.windows.net",
                "key": "{{searchkey}}",
                "indexName": "{{newindex}}",
                "inScope": false,
                "filter": "{{targetfield}}/any(g:search.in(g, '{{usfilter}}'))"
            }
        }
    ]
}

### chat with private data from an India user's perspective - which is over the Devops giude PDF
@indiafilter={{adgroupindia}}
POST https://{{openaiendpoint}}.openai.azure.com/openai/deployments/{{openaichatmodel}}/extensions/chat/completions?api-version=2023-06-01-preview
api-key: {{openaikey}}
Content-Type: application/json

{
    "messages": [
        {
            "role": "user",
            "content": "what are the pros and cons DevOps or GitHub?"
        }
    ],
    "dataSources": [
        {
            "type": "AzureCognitiveSearch",
            "parameters": {
                "endpoint": "https://{{searchinstance}}.search.windows.net",
                "key": "{{searchkey}}",
                "indexName": "{{newindex}}",
                "inScope": false,
                "filter": "{{targetfield}}/any(g:search.in(g, '{{indiafilter}}'))"
            }
        }
    ]
}

